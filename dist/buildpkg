#!/bin/sh
# $Id: $
#
die()
{
	echo >&2 "$@"
	exit 1
}

# Build the distribution package.
. ./RELEASE || die "Can't read the RELEASE file"

CSHARP_DOC_SRC=""
# 0 is none, 1 is local dir, 2 is remote dir
CSHARP_DOC_LOCATION=0
test_run=0
LICENSE_TYPE=""

while [ $# -gt 0 ]
do
	case "$1" in
	-n)
		nodocs=true;;
	-csharp_doc_src)
		shift
		if [ ! $# -gt 0 ]; then
	       		die "csharp_doc_dir param requires argument."
		fi
		CSHARP_DOC_SRC=$1
		CSHARP_DOC_LOCATION=1
		if [ ! -f $CSHARP_DOC_SRC ]; then
			die "CSharp doc archive must exist."
		fi;;
	-csharp_doc_url)
		shift
		if [ ! $# -gt 0 ]; then
	       		die "csharp_doc_dir param requires argument."
		fi
		CSHARP_DOC_SRC=$1
		CSHARP_DOC_LOCATION=2;;
	-license_type)
		shift
		if [ ! $# -gt 0 ]; then 
			die "-license_type param requires argument."
		fi
		LICENSE_TYPE=$1;;
	-test)
		echo "Doing a test run - this may contain changes that aren't\
reflected in a tag, so the package won't be reproducible."
		test_run=1;;
	esac
	shift
done

# Check for valid license type.
if [[ $LICENSE_TYPE != "ORACLE" ]] && [[ $LICENSE_TYPE != "AGPL" ]]; then
	echo "You must specify a license type of ORACLE (commercial) or AGPL (open source)."
	exit 1
fi

# A version string can be specified on the command line (e.g., "20080219").
# Otherwise, use the standard X.X.X format.
VERSION=${1:-${DB_VERSION_MAJOR}.${DB_VERSION_MINOR}.${DB_VERSION_PATCH}}

# Use "ustar" or "star" as the archiver
TAR=star

# Set root directory where we do the work, can be anywhere.
START_DIR=`pwd`
D=`pwd`/../release
R="$D/db-${VERSION}"
DOCS=`pwd`/../../docs_books
DB_ADDONS=`pwd`/../../db_addons

if [ ! -d $DB_ADDONS ]; then
	echo "buildpkg requires a db_addons repository at the same level as the db repository."
	exit 1
fi

# Create directory, remove any previous release tree.
rm -rf $R
mkdir -p $R

echo "Removed old release build from $R"

# Copy the files in the current tip to $R
hg archive $R

# If doing a test run, apply any local changes to the new tree.
if [ $test_run != 0 ]; then
	hg diff | patch -p1 -d $R
fi

echo "Created hg archive in $R"

# Build the appropriate LICENSE file for the distribution and discard the
# extra parts before assembling the package. Third party notices belong
# in all distributions.
cd $R
if [ $LICENSE_TYPE = "AGPL" ]; then
	if [ ! -f AGPL ]; then 
		die "AGPL license file is missing."
	fi
	cat AGPL >> LICENSE
fi	
if [ $LICENSE_TYPE = "ORACLE" ]; then
	if [ ! -f ORACLE ]; then 
		die "ORACLE license file is missing."
	fi
	cat ORACLE >> LICENSE
fi	
if [ ! -f 3RDPARTY ]; then 
	die "3RDPARTY license file is missing."
fi
cat 3RDPARTY >> LICENSE
rm 3RDPARTY ORACLE AGPL

if [ "$nodocs" = true ] ; then
	rm -rf $R/docs
else
	[ -d $DOCS ] || die "buildpkg requires a docs_books repository at the same level as the db repository."

	# Check that the doc repo is up to date, and create a tag if necessary.
	cd $DOCS
	hg pull -u
	if [ $? != 0 ]; then
		rm -rf $R
		die "Failed updating the docs_books repository."
	fi
	has_tag=`hg tags | grep "db-${VERSION}"`
	if [ "$has_tag" = "" ]; then
		hg tag "db-${VERSION}"
		TAG_CREATED="true"
	else
		hg up -r "db-${VERSION}"
	fi

	# Build a copy of the documentation in the release tree.
	cd $R/dist
	sh s_docs db-${VERSION} $DOCS

	if [ $? != 0 ]; then
		rm -rf $R
		die "Failed generating documentation."
	fi

	# Copy in the C sharp doc.
	if [ $CSHARP_DOC_LOCATION -eq 2 ]; then
		scp $CSHARP_DOC_SRC .
		CSHARP_DOC_SRC="csharp_docs.tgz"
		if [ ! -f $CSHARP_DOC_SRC ]; then
			echo "WARNING: Invalid csharp doc file - csharp_docs.tgz expected."
		fi
	fi
	if [ $CSHARP_DOC_LOCATION -eq 0 -o ! -f $CSHARP_DOC_SRC ]; then
		echo "WARNING: No csharp docs, skipping."
		CSHARP_DOC_LOCATION=0
	fi
	if [ $CSHARP_DOC_LOCATION != 0 ]; then
		rm -rf $R/docs/csharp
		mkdir -p $R/docs/csharp
		$TAR zxf $CSHARP_DOC_SRC -C $R/docs/csharp
	fi

	# Build the Java documentation.
	cd $R/dist && sh s_javadoc
fi

cd $START_DIR

# Pull a copy of the bfile directory into the package.
cd $DB_ADDONS
hg pull -u
if [ $? != 0 ]; then
	echo "Failed updating the db_addons repository. Exiting."
	rm -rf $R
	exit 1
fi

cd $START_DIR

# Remove source directories we don't distribute.
cd $R && rm -rf test/tcl/TODO test/upgrade test/scr036 test/erlang
cd $R && rm -rf test/perf test/purify test/repmgr
cd $R && rm -rf test/server test/stl test/vxworks
cd $R && rm -rf malware_scans
cd $R && rm -rf static_analysis
cd $R && find . -name '.hg*' | xargs rm -f
cd $R && find . -name 'tags' | xargs rm -f

# Create symbolic links and cscope output, fix permissions.
#cd $R/dist && sh s_perm
#cd $R/dist && sh s_cscope

# Build a regular version and smoke test.
### cd $R && rm -rf build_run && mkdir build_run
### cd $R/build_run && ../dist/configure && make >& mklog
### cd $R/build_run && make ex_access && echo "test" | ./ex_access
# Check the install
### cd $R/build_run && make prefix=`pwd`/BDB install

# Build a small-footprint version and smoke test.
### cd $R && rm -rf build_run && mkdir build_run
### cd $R/build_run && ../dist/configure --enable-smallbuild && make >& mklog
### cd $R/build_run && make ex_access && echo "test" | ./ex_access

# Remove the build directory
### cd $R && rm -rf build_run

# Build the Java API components
cd $R && rm -rf build_java && mkdir build_java
cd $R/build_java && ../dist/configure --enable-java && make -j4 >& mklog
rm -rf $R/build_java

(cd $R/dist && ./s_perm)

# Check for file names differing only in case.
cd $R && find . | sort -f | uniq -ic | sed '/1 /d'

# Create the crypto tar archive release.
T="$D/db-$VERSION.tar.gz"
rm -f $T
cd $D || die "Can't find $D"
# Move package files in db-$VERSION/release to current directory so that
# regular packages won't includes generated package twice.
if [ -d "db-$VERSION/release" ]; then
	mv db-$VERSION/release/* .
	rm -rf db-$VERSION/release
fi
$TAR czf $T -find db-$VERSION -chown 100 -chgrp 100
chmod 444 $T

# Adjust LICENSE and README to DOS mode.
t=__tmp
cd $R && awk '{print $0 "\r"}' < LICENSE > $t && rm -f LICENSE && cp $t LICENSE
cd $R && awk '{print $0 "\r"}' < README > $t && rm -f README && cp $t README && rm $t

# Create the crypto zip archive release.
T="$D/db-$VERSION.zip"
rm -f $T
cd $R/.. && rm -f $T && zip -q -r $T db-$VERSION
chmod 444 $T

rm -rf $R

if [ "$TAG_CREATED" = "true" ]; then
	echo "Created a tag in docs_books repository. Please push."
fi
